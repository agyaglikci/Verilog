module DataPathUnit(clk, Din, CW, Dout, SC);
parameter n = 6;
input clk;
input [n-1:0] Din;
input [16:0] CW;
output [n-1:0] Dout;
output [4:0] SC;
reg [n-1:0] R1, R2, R3, a, b, f;

always@(posedge clk)
case (CW[15:13])
0: R3 <= R3;
1: R3 <= R3>>1;
2: R3 <= R3<<1;
3: R3 <= f;
4: R3 <= R3 + 1;
5: R3 <= R3 - 1;
6: R3 <= {R3[n-2:0], R3[n-1]};
7: R3 <= 0;
endcase

always@(posedge clk)
case (CW[12:10])
0: R2 <= R2;
1: R2 <= R2>>1;
2: R2 <= R2<<1;
3: R2 <= f;
4: R2 <= R2 + 1;
5: R2 <= R2 - 1;
6: R2 <= {R2[n-2:0], R2[n-1]};
7: R2 <= 0;
endcase

always@(posedge clk)
case (CW[9:7])
0: R1 <= R1;
1: R1 <= R1>>1;
2: R1 <= R1<<1;
3: R1 <= f;
4: R1 <= R1 + 1;
5: R1 <= R1 - 1;
6: R1 <= {R1[n-2:0], R1[n-1]};
7: R1 <= 0;
endcase

always@(posedge clk)
case (CW[6:5])
0: a <= Din;
1: a <= R1;
2: a <= R2;
3: a <= R3;
endcase

always@(posedge clk)
case (CW[4:3])
0: b <= Din;
1: b <= R1;
2: b <= R2;
3: b <= R3;
endcase

always@(posedge clk)
case (CW[2:0])
0: f <= 0;
1: f <= a + b;
2: f <= a - b;
3: f <= b - a;
4: f <= a & b;
5: f <= a | b;
6: f <= a ^ b;
7: f <= a;
endcase

always@(posedge clk)
if (CW[16])
begin
SC[0] <= (f == 0);
SC[3] <= (f<0);
SC[4] <= f[0];
end